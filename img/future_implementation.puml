@startuml
class IPC
{
	# std::fstream fs{}
	# ipc_option_t opts{}
	# long timeout{10}
	# char *buffer{nullptr}
	# ChronoTime timer{}
	# ipc_info_t ipc_info{}

	+ IPC(ipc_option_t options)
	+ virtual ~IPC()

	+ unsigned long get_file_size() const
	+ virtual void cleanup()
	+ virtual void print_members() const
	+ void open_file()
	+ void write_to_file(char *data, std::streamsize data_size)
}

class IPCMsgQSend
{
	# mqd_t mqd{}
	# struct mq_attr attr{0, 10, 8192, 0}
	# unsigned mq_priority{MQ_PRIO_MAX - 1}

	+ IPCMsgQSend(ipc_options_t options) : IPC(options)
	+ ~IPCMsgQSend() override

	+ void cleanup() override
	+ void init()
	+ void print_members() const override
	+ void send()
	+ void auto_start()
}

class IPCMsgReceive
{
	+ IPCMsgQReceive(ipc_options_t options) : IPCMsgQSend(options)
	+ void init()
	+ void receive()
	+ void auto_start()
}

enum ipc_protocol_t<<enumeration>>
{
	NONE
	MSG_QUEUE
	PIPE
	SHARED_MEM
}

enum ipc_mode_t<<enumeration>>
{
	SEND_MODE
	RECEIVE_MODE
}

class ipc_option_t << (S,lightblue) struct>>
{
	+ ipc_mode_t mode{}
	+ ipc_protocol_t protocol{NONE}
	+ std::string server_name{}
	+ std::string file_name{}
	+ size_t mem_size{0}
}

class ipc_info_t << (S,lightblue) struct>>
{
	+ long number_of_msg{}
	+ long read_bytes{}
	+ long sent_bytes{}
	+ unsigned long file_size{}
	+ unsigned long total_sent_bytes{}
}

class ipc_shm_header_t << (S,lightblue) struct>>
{
	+ pthread_cond_t cond
	+ pthread_mutex_t mutex
	+ size_t data_size
	+ size_t data_version
	+ size_t shared_mem_size
	+ volatile bool is_init
	+ volatile bool is_read
	+ char data_ap[0]
}

class IPCPipeSend
{
	# int pd{0}
	# std::streamsize p_msgsize{PIPE_BUF}

	+ IPCPipeSend(ipc_options_t options) : IPC(options)
	+ ~IPCPipeSend() override

	+ void init()
	+ void cleanup() override
	+ void send()
	+ void auto_start()
	+ void print_members() const override

}

class IPCPipeReceive
{
	+ IPCPipeReceive(ipc_options_t options) : IPCPipeSend(options)
	+ void init()
	+ void receive()
	+ void auto_start()
}

class IPCShmSend
{
	# int shmd{}
	# pthread_mutexattr_t mutex_attr{}
	# pthread_condattr_t cond_attr{}
	# ipc_shm_header_t *shm_ptr{}
	# size_t shm_size_in_bytes{}
	# bool is_end{false}

	+ IPCShmSend(ipc_options_t options)
		: IPC(options), shm_size_in_bytes(options.mem_size * 1024)
	+ ~IPCShmSend() override

	+ void cleanup() override
	+ void init()
	+ void init_cond()
	+ void init_mutex()
	+ void lock_mutex()
	+ void map_shm()
	+ void open_shm()
	+ void print_members() const override
	+ void send()
	+ void send_cond_broadcast()
	+ void set_shm_size()
	+ void unlock_mutex()
	+ void auto_start()
}

class IPCShmReceive
{
	# unsigned number_of_tries {10}
	# size_t last_version{0}

	+ IPCShmReceive(ipc_options_t options) : IPCShmSend(options)
	+ void init()
	+ void open_shm()
	+ void map_shm()
	+ void access_shm()
	+ void auto_start()
	+ void receive()
	+ void print_members() const

}

class ChronoTime
{
	# std::chrono::time_point<std::chrono::system_clock> begin{}
	# std::chrono::time_point<std::chrono::system_clock> end{}
	# long duration{}

	+ void update_all()
	+ void update_begin()
	+ void update_end()
	+ long get_duration()
}

IPC <|-- IPCMsgQSend
IPC <|-- IPCPipeSend
IPC <|-- IPCShmSend

IPCMsgQSend <|-- IPCMsgReceive
IPCPipeSend <|-- IPCPipeReceive
IPCShmSend  <|-- IPCShmReceive

ipc_protocol_t -- ipc_option_t
ipc_shm_header_t -- IPCShmSend
ipc_option_t -- IPC
ipc_option_t -- ipc_mode_t
ipc_info_t --  IPC
ChronoTime -- IPC

@enduml
